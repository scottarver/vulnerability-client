import { VulnerabilityClient } from '../src/index';
import { expect, assert } from 'chai';
import { describe, before } from 'mocha';
import * as sinon from 'sinon';

let listOfRemediations = new Array();
let remediationItem = {
  name: 'bob',
  description: 'stuff',
  id: '1234',
  vulnerability_ids: [
    '0987'
  ]
};

listOfRemediations.push(remediationItem);

let listOfVulnerabilities = new Array();
let vulnerabilityItem = {
  impact: 'a impact',
  resolution: 'a resolution',
  osvdb: ['osvdb'],
  class: 'vulnerability',
  nsid: ['nsid'],
  severity: 'critical',
  cve: ['cve'],
  bid: 'bid',
  reference: 'a reference',
  description: 'a description',
  id: '1234',
};

listOfVulnerabilities.push(vulnerabilityItem);

afterEach(() => {
  sinon.restore();
});
describe('Vulnerability Client Test Suite:', () => {
  describe('when batch adding remediations', () => {
    let stub: sinon.SinonSpy;
    beforeEach(() => {
      stub = sinon.stub(VulnerabilityClient['alClient'], 'post');
    });
    afterEach(() => {
      stub.restore();
    });
    it('should call fetch() on the ALClient instance', async() => {
      await VulnerabilityClient.addRemediations(listOfRemediations);
      expect(stub.callCount).to.equal(1);
    });
  });
  describe('when adding a remediation', () => {
    let stub: sinon.SinonSpy;
    beforeEach(() => {
      stub = sinon.stub(VulnerabilityClient['alClient'], 'post');
    });
    afterEach(() => {
      stub.restore();
    });
    it('should call fetch() on the ALClient instance', async() => {
      await VulnerabilityClient.addRemediation(remediationItem);
      expect(stub.callCount).to.equal(1);
    });
  });
  describe('when fetching remediations', () => {
    let stub: sinon.SinonSpy;
    beforeEach(() => {
      stub = sinon.stub(VulnerabilityClient['alClient'], 'fetch');
    });
    afterEach(() => {
      stub.restore();
    });
    it('should call fetch() on the ALClient instance', async() => {
      await VulnerabilityClient.getRemediations();
      expect(stub.callCount).to.equal(1);
    });
  });
  describe('when fetching a remediation', () => {
    let stub: sinon.SinonSpy;
    beforeEach(() => {
      stub = sinon.stub(VulnerabilityClient['alClient'], 'fetch');
    });
    afterEach(() => {
      stub.restore();
    });
    it('should call fetch() on the ALClient instance', async() => {
      await VulnerabilityClient.getRemediation('1234');
      expect(stub.callCount).to.equal(1);
    });
  });
  describe('when updating a remediation', () => {
    let stub: sinon.SinonSpy;
    beforeEach(() => {
      stub = sinon.stub(VulnerabilityClient['alClient'], 'post');
    });
    afterEach(() => {
      stub.restore();
    });
    it('should call fetch() on the ALClient instance', async() => {
      await VulnerabilityClient.updateRemediation('1234', remediationItem);
      expect(stub.callCount).to.equal(1);
    });
  });
  describe('when batch adding vulnerabilities', () => {
    let stub: sinon.SinonSpy;
    beforeEach(() => {
      stub = sinon.stub(VulnerabilityClient['alClient'], 'post');
    });
    afterEach(() => {
      stub.restore();
    });
    it('should call fetch() on the ALClient instance', async() => {
      await VulnerabilityClient.addVulnerabilities(listOfRemediations);
      expect(stub.callCount).to.equal(1);
    });
  });
  describe('when adding a vulnerability', () => {
    let stub: sinon.SinonSpy;
    beforeEach(() => {
      stub = sinon.stub(VulnerabilityClient['alClient'], 'post');
    });
    afterEach(() => {
      stub.restore();
    });
    it('should call fetch() on the ALClient instance', async() => {
      await VulnerabilityClient.addVulnerability(vulnerabilityItem);
      expect(stub.callCount).to.equal(1);
    });
  });
  describe('when fetching vulnerabilities', () => {
    let stub: sinon.SinonSpy;
    beforeEach(() => {
      stub = sinon.stub(VulnerabilityClient['alClient'], 'fetch');
    });
    afterEach(() => {
      stub.restore();
    });
    it('should call fetch() on the ALClient instance', async() => {
      await VulnerabilityClient.getVulnerabilities();
      expect(stub.callCount).to.equal(1);
    });
  });
  describe('when fetching a vulnerability', () => {
    let stub: sinon.SinonSpy;
    beforeEach(() => {
      stub = sinon.stub(VulnerabilityClient['alClient'], 'fetch');
    });
    afterEach(() => {
      stub.restore();
    });
    it('should call fetch() on the ALClient instance', async() => {
      await VulnerabilityClient.getVulnerability('1234');
      expect(stub.callCount).to.equal(1);
    });
  });
    
});
