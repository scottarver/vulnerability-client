/**
 * Module to deal with available Ticket Master Public API endpoints
 */
import { ALClient } from '@al/client';

export interface RemediationDefinition {
  name?: string;
  description?: string;
  id?: string;
  vulnerability_ids?: string[];
}

export interface RemediationDefinitions {
  [position: number]: RemediationDefinition[];
}

export interface RemediationsResponse {
  remediations: RemediationDefinition[];
}

export interface VulnerabilityDefinition {
  impact?: string;
  resolution?: string;
  osvdb?: string[];
  class?: string;
  nsid?: string[];
  severity?: string;
  cve?: string[];
  bid?: string;
  reference?: string;
  description?: string;
  id?: string;
}

export interface VulnerabilityDefinitions {
  [position: number]: VulnerabilityDefinition[];
}

export interface VulnerabilitiesResponse {
  vulnerabilities: VulnerabilityDefinition[];
}

class VulnerabilityClient {

  private alClient = ALClient;
  private serviceName = '';

  /**
   * Add a list of remediations
   * POST
   * /remediation/v1/batch
   * "https://api.cloudinsight.alertlogic.com/remediation/v1/batch"
   * -d@'example-remediation.json'
   */
  async addRemediations(remediationData: RemediationDefinitions) {
    const remediation = await this.alClient.post({
      service_name: 'remediation',
      path: '/batch',
      data: remediationData,
    });
    return remediation;
  }

  /**
   * Add a remediation
   * POST
   * /remediation/v1
   * "https://api.cloudinsight.alertlogic.com/remediation/v1"
   * -d@'example-remediation.json'
   */
  async addRemediation(remediationData: RemediationDefinition) {
    const remediation = await this.alClient.post({
      service_name: 'remediation',
      data: remediationData,
    });
    return remediation;
  }

  /**
   * Get a remediation
   * GET
   * /remediation/v1/:remediation_id
   * "https://api.cloudinsight.alertlogic.com/remediation/v1/f728405b92a8456994c1e05bb282e311"
   */
  async getRemediation(remediationId: string) {
    const remediation = await this.alClient.fetch({
      service_name: 'remediation',
      path: `/${remediationId}`,
    });
    return remediation as RemediationDefinition;
  }

  /**
   * List remediations
   * GET
   * /remediation/v1
   * "https://api.cloudinsight.alertlogic.com/remediation/v1"
   */
  async getRemediations(queryParams?: {vulnerability_ids?: string, remediation_ids?: string}) {
    const remediation = await this.alClient.fetch({
      service_name: 'remediation',
      params: queryParams,
    });
    return remediation as RemediationsResponse;
  }

  /**
   * Update a remediation
   * POST
   * /remediation/v1/:remediation_id
   * "https://api.cloudinsight.alertlogic.com/remediation/v1/f728405b92a8456994c1e05bb282e311"
   * -d@'example-remediation-update.json'
   */
  async updateRemediation(remediationId: string, remediationData: RemediationDefinition) {
    const remediation = await this.alClient.post({
      service_name: 'remediation',
      path: `/${remediationId}`,
      data: remediationData,
    });
    return remediation;
  }

  /**
   * Add a list of vulnerabilities
   * POST
   * /vulnerability/v1/batch
   * "https://api.cloudinsight.alertlogic.com/vulnerability/v1/batch"
   * -d@'example-vulnerability.json'
   */
  async addVulnerabilities(vulnerabilityData: VulnerabilityDefinitions) {
    const vulnerability = await this.alClient.post({
      service_name: 'vulnerability',
      path: '/batch',
      data: vulnerabilityData,
    });
    return vulnerability;
  }

  /**
   * Add a vulnerability
   * POST
   * /vulnerability/v1/batch
   * "https://api.cloudinsight.alertlogic.com/vulnerability/v1"
   * -d@'example-vulnerability.json'
   */
  async addVulnerability(vulnerabilityData: VulnerabilityDefinition) {
    const vulnerability = await this.alClient.post({
      service_name: 'vulnerability',
      data: vulnerabilityData,
    });
    return vulnerability;
  }

  /**
   * Get a vulnerability
   * GET
   * /vulnerability/v1/:vulnerability_id
   * "https://api.cloudinsight.alertlogic.com/vulnerability/v1/f728405b92a8456994c1e05bb282e311"
   */
  async getVulnerability(vulnerabilityId: string) {
    const vulnerability = await this.alClient.fetch({
      service_name: 'vulnerability',
      path: `/${vulnerabilityId}`,
    });
    return vulnerability as VulnerabilityDefinition;
  }

  /**
   * List vulnerabilities
   * GET
   * /vulnerability/v1
   * "https://api.cloudinsight.alertlogic.com/vulnerability/v1"
   */
  async getVulnerabilities(queryParams?: {vulnerability_ids?: string, remediation_ids?: string}) {
    const vulnerability = await this.alClient.fetch({
      service_name: 'vulnerability',
      params: queryParams,
    });
    return vulnerability as VulnerabilitiesResponse;
  }

}

export const vulnerabilityClient = new VulnerabilityClient();
